"""========================
pipeline_hto_demux.py
===========================

Overview
========

This pipeline takes cellranger count (GEX) and CITE-seq-count (ADT) data from multiplexed single cell RNA-seq data and uses Seurat HTODemux to demultiplex data.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use cgat pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_hto_demux.py config

Input files
-----------

* path.map file (tab seprated) specifying the location of cellranger count directories and there corresponding CITE-seq-count outputs. The first column is the cellranger outputs, the second column is the CITE-seq-count outputs and the third column is the sample name. E.g.

<path-to-cellranger>/outs <path-to-cite-seq-count>/read_count sample_name


The sample_name here refers to the multiplexed sample name that effectively joins the GEX and ADT data.

Outputs
--------

The output from this pipeline is a Seurat object of demultiplexed data that can be found in demux.dir/.

Requirements
------------

Seurat
ggplot2


Pipeline output
===============


Glossary
========

.. glossary::


Code
====

"""
import sys
import os
import collections
import glob
from pathlib import Path
from ruffus import *
from cgatcore import pipeline as P

# load options from the config file
PARAMS = P.get_parameters(
    ["pipeline.yml"])

scriptsdir = os.path.dirname(os.path.abspath(__file__))
scriptsdir = os.path.join(scriptsdir, "scripts")
rscriptsdir = P.snip(scriptsdir, "scripts") + "R" 
PARAMS["scriptsdir"] = scriptsdir
PARAMS["rscriptsdir"] = rscriptsdir


############################################################
############################################################
############################################################
def inputData(path_map):
    '''
    create directories of linked infiles for the demultiplexing steps
    '''
    with open(path_map) as f:
        for line in f.readlines():
            data = line[:-1].split("\t")
            gex, adt, sample_name = data
            outfile = f"linked_files.dir/{sample_name}"
            yield([gex, adt, sample_name], outfile)

############################################################
############################################################
############################################################
@follows(mkdir("linked_files.dir"))
@split("paths.map", "linked_files.dir/*")
def link_infiles(infile, outfiles):
    '''link directories for downstream analysis
    '''
    for infiles, outdir in inputData(infile):
        os.mkdir(outdir)
        os.symlink(os.path.abspath(infiles[0]), os.path.abspath(outdir+"/gex"))
        os.symlink(os.path.abspath(infiles[1]), os.path.abspath(outdir+"/adt"))


############################################################
############################################################
############################################################
@follows(mkdir("hto_demux.dir"))
@transform(link_infiles, regex("linked_files.dir/(\S+)"), r"hto_demux.dir/\1_hashtag.Rds")
def runHTODemux(infile, outfile):
    '''
    run HTODemux from Seurat based on inputs from paths.map
    '''
    gex_dir = infile + "/gex"
    adt_dir = infile + "/adt"
    outdir = os.path.dirname(outfile)
    umi_count = PARAMS["filter_umi"]
    sample_name=os.path.basename(infile)
    filter_htos=PARAMS["filter_hto_list"]
    if not filter_htos:
        filter_hto_option = ""
    else:
        filter_hto_option = "--filter-htos=%(filter_htos)s" % locals()

    statement = '''Rscript %(rscriptsdir)s/hto_demux.R
                   --gex-dir=%(gex_dir)s
                   --adt-dir=%(adt_dir)s
                   --sample-name=%(sample_name)s
                   --out-dir=%(outdir)s
                   --filter-umi-count=%(umi_count)s
                   %(filter_hto_option)s
                '''
    P.run(statement)


# ---------------------------------------------------
# Generic pipeline tasks
@follows(runHTODemux)
def full():
    pass

@follows(mkdir("report.dir"))
def build_report():
    '''build report
    '''
    report_dir = os.path.abspath(os.path.join(os.path.dirname(__file__),
                            "pipeline_docs/Rmd/pipeline_hto_demux"))
    report_file = os.path.join(report_dir, "hto_demux_report.Rmd")

    statement ='''cd report.dir; 
              cp %(report_file)s .;
              Rscript -e "rmarkdown::render('hto_demux_report.Rmd', output_format='html_document')";
              cd ../  
              '''
    P.run(statement)


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))    
